---
#
# Create the networks and connect the systems.
#

- name: include dynamic info
  include_vars:
    file: "{{ working_dir }}/ansible_run_vars.yml"
    name: dyn_data

#
# At this time we use a bash script to setup the networks between the systems
# We do this because we need to find a cidr that is not in use.
# 
- name: AWS connect systems
  block:
  - name: aws_connect systems
    shell: "{{ working_dir }}/aws_network_create -n {{ config_info.cloud_numb_networks }} -v {{ dyn_data.aws_vpc_id }} -z {{ dyn_data.cloud_zone }} -s {{ dyn_data.aws_sec_grp }} -c {{ dyn_data.aws_instance_id }} -h {{ dyn_data.aws_net_instance_id }} {{ dyn_data.ssh_i_option }} -u {{ config_info.test_user }} -C {{ dyn_data.test_hostname }} -H {{ dyn_data.net_hostname }} -D {{ config_info.user_parent_home_dir }} -d {{ config_info.user_running }}_{{ config_info.run_label }} -S {{ config_info.system_type }} -O {{ config_info.os_vendor  }} &> net_connect_data"
    args:
      chdir: "{{ working_dir }}"
    ignore_errors: yes
    register: results
#
# If the connection has failed, then terminate the systems and abort.
#
  - name: Terminate if need be.
    block:
    - name: terminate aws instances
      include_role:
        name: tf_delete
      vars:
        tf_dir: "tf"
    - name: End run, unable to connect networks
      fail: msg="Unable to connect networks between systems. See earlier messages for debugging info."
    when: results.rc != 0
  when:
    - config_info.system_type == "aws"
    - config_info.cloud_numb_network_type != "public"

- name: AWS connect public systems
  block:
  - name: aws_connect systems
    shell: "{{ working_dir }}/aws_network_create -n {{ config_info.cloud_numb_networks }} -v {{ dyn_data.aws_vpc_id }} -z {{ dyn_data.cloud_zone }} -s {{ dyn_data.aws_sec_grp }} -c {{ dyn_data.aws_instance_id }} -h {{ dyn_data.aws_net_instance_id }} {{ dyn_data.ssh_i_option }} -u {{ config_info.test_user }} -C {{ dyn_data.test_hostname }} -H {{ dyn_data.net_hostname }} -D {{ config_info.user_parent_home_dir }} -d {{ config_info.user_running }}_{{ config_info.run_label }} -S {{ config_info.system_type }} -O {{ config_info.os_vendor  }} -p  &> net_connect_data"
    args:
      chdir: "{{ working_dir }}"
    ignore_errors: yes
    register: results
  when:
    - config_info.system_type == "aws"
    - config_info.cloud_numb_network_type == "public"

- name: include dynamic info
  include_vars:
    file: "{{ working_dir }}/ansible_run_vars.yml"
    name: dyn_data

#
# Report public ip if we have public as the network
# 
- name: Report public ip
  block:
  - name: set server ip
    lineinfile:
      path: "{{ working_dir }}/ansible_run_vars.yml"
      line: "ct_uperf_server_ip: {{ dyn_data.test_hostname }}"
  - name: set server ip
    lineinfile:
      path: "{{ working_dir }}/ansible_run_vars.yml"
      line: "ct_uperf_client_list: {{ dyn_data.net_hostname }}"
  - name: add net hostname
    add_host:
      name: "{{ dyn_data.net_hostname }}"
      groups: test_group
      ansible_user: "{{ config_info.test_user }}"
      ansible_ssh_private_key_file: "{{ config_info.ssh_key }}"
  when: config_info.cloud_numb_network_type == "public"
