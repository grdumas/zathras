#!/bin/bash
#
#                       License
#
# Copyright (C) 2022  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# aws_network_create is part of the Zathras automation framework.  Its purpose is to
#   create a network connection between 2 AWS systems.
#

#
# aws_network_create exists due to the fact that we have to find an available cidr-block
# for the nics.   
#
ct_ssh_i_option=""
public_net=0

description="test_network"
while getopts "D:C:H:u:i:n:v:z:s:c:h:d:S:O:p" o; do
	case "${o}" in
		n)
			ct_network=${OPTARG}
		;;
		v)
			aws_vpc_id=${OPTARG}
		;;
		z)
			net_locale=${OPTARG}
		;;
		s)
			security_grp=${OPTARG}
		;;
		c)
			ct_instance=${OPTARG}
		;;
		h)
			net_ct_instance=${OPTARG}
		;;
		p)
			public_net=1
		;;
		i)
			ct_ssh_i_option=" -i "${OPTARG}
		;;
		d)
			description=${OPTARG}
		;;
		u)
			ct_user_log_in=${OPTARG}
		;;
		C)
			ct_hostname=${OPTARG}
		;;
		H)
			net_ct_hostname=${OPTARG}
		;;
		D)
			ct_home_dir_base=${OPTARG}
		;;
		S)
			system_type=$OPTARG
		;;
		O)
			os_vendor=$OPTARG
		;;
        esac
done
shift $((OPTIND-1))

if [ $public_net -eq 0 ]; then
	addr_start=125

	ip_addr1=9
	ip_addr2=10
	add_prefix=""
	dev_index=2
	ct_server_ip_export=""
	declare -a nic_id
	total_nics=0
	failed=0

	for net_number in  `seq 1 1 $ct_network`
	do
		while true; do
			echo aws ec2 create-subnet --vpc-id $aws_vpc_id --cidr-block 172.31.$addr_start.0/24 --availability-zone=$net_locale --output text
			aws ec2 create-subnet --vpc-id $aws_vpc_id --cidr-block 172.31.$addr_start.0/24 --availability-zone=$net_locale --output json  > subnet_id
			value=`grep SubnetId subnet_id | cut -d'"' -f 4`
			if [[ $value == *"subnet-"* ]]; then
				subnet_int=$value
				break;
			fi
			let "addr_start=$addr_start+1"
			if [ $addr_start -gt 255 ]; then
				failed=1
			fi
		done
	
		cidr=172.31.$addr_start.0/24
		# create the networks
		aws ec2 create-network-interface --subnet-id $subnet_int --description $description --groups $security_grp  --private-ip-address 172.31.$addr_start.$ip_addr1 --output json > nic1
		ni_1_int=`grep NetworkInterfaceId  nic1  | cut -d'"' -f 4`
		echo aws ec2 attach-network-interface --network-interface-id $ni_1_int --instance-id $ct_instance --device-index $dev_index --output text
		#
		# --output text is fine, output from the command is just the interface name
		#
		nia_1_int=`aws ec2 attach-network-interface --network-interface-id $ni_1_int --instance-id $ct_instance --device-index $dev_index --output text`

		aws ec2 create-network-interface --subnet-id $subnet_int --description $description --groups $security_grp  --private-ip-address 172.31.$addr_start.$ip_addr2 --output json > nic2
		ni_2_int=`grep NetworkInterfaceId  nic2  | cut -d'"' -f 4`
		ct_client_ip_int="172.31.${addr_start}.$ip_addr1"
		ct_server_ip_int="172.31.${addr_start}.$ip_addr2"

		echo aws ec2 attach-network-interface --network-interface-id $ni_2_int --instance-id $net_ct_instance --device-index $dev_index --output text
		#
		# --output text is fine, output from the command is just the interface name
		#
		nia_2_int=`aws ec2 attach-network-interface --network-interface-id $ni_2_int --instance-id $net_ct_instance --device-index $dev_index --output text`
		if [ "$ni_1"  != "" ]; then
			add_seper=" "
			add_seper_exp=","
	#
	# Right now, two systems only
	#
		else
			ct_server_ip_exp=$ct_server_ip_int
			ct_client_ip_single=$ct_client_ip_int
		fi
		cidr_out=${cidr_out}${add_seper}${cidr}
		ni_1=${ni_1}${add_seper}${ni_1_int}
		nia_1=${nia_1}${add_seper}${nia_1_int}
		ni_2=${ni_2}${add_seper}${ni_2_int}
		nia_2=${nia_2}${add_seper}${nia_2_int}
		ct_client_ip=${ct_client_ip}${add_seper}${ct_client_ip_int}
		ct_server_ip=${ct_server_ip}${add_seper}${ct_server_ip_int}
		ct_client_ip_export=${ct_client_ip_export}${add_seper_exp}${ct_client_ip_int}
		ct_server_ip_export=${ct_server_ip_export}${add_seper_exp}${ct_server_ip_int}
		subnet=${subnet}${add_seper}${subnet_int}
		let "dev_index=$dev_index + 1"
		let "addr_start=$addr_start+1"
	done

	echo subnet: >> ansible_run_vars.yml
	echo "subnet: $subnet" >> output

	#
	# Can happen if creation failed.
	#
	if [ -z $subnet ]; then
			echo "  - none"  >> ansible_run_vars.yml
	else
		for item in $subnet
		do
			echo "  - "$item  >> ansible_run_vars.yml
		done
	fi

	if [ $failed -eq 1 ]; then
		exit 1
	fi

	echo network_interface_client: >> ansible_run_vars.yml
	echo "ni_1: $ni_1" >> output
	for item in $ni_1
	do
		echo "  - "$item  >> ansible_run_vars.yml
		nic_id[${total_nics}]=$item
		let "total_nics=$total_nics+1"
	done

	echo network_interface_attach_client: >> ansible_run_vars.yml
	echo "nia_1: $nia_1" >> output
	for item in $nia_1
	do
		echo "  - "$item  >> ansible_run_vars.yml
	done

	echo network_interface_server: >> ansible_run_vars.yml
	echo "ni_2: $ni_2" >> output
	for item in $ni_2
	do
		echo "  - "$item  >> ansible_run_vars.yml
		nic_id[${total_nics}]=$item
		let "total_nics=$total_nics+1"
	done

	echo "nia_2: $nia_2" >> output
	echo network_interface_attach_server: >> ansible_run_vars.yml
	for item in $nia_2
	do
		echo "  - "$item  >> ansible_run_vars.yml
	done
	#
	# Set things up so we delete the nics when we exit.
	#
	let "total_nics=$total_nics-1"
	for windex in 0 `seq 1 1 $total_nics`
	do
		attach_id=`aws ec2 describe-network-interfaces --network-interface-ids ${nic_id[${windex}]} | grep ATTACHMENT | awk '{print $3}'`
		value=`aws ec2 modify-network-interface-attribute --network-interface-id ${nic_id[${windex}]} --attachment AttachmentId=$attach_id,DeleteOnTermination=true`
	done

	echo "ct_uperf_cidr:" >> ansible_run_vars.yml
	for item in $cidr_out
	do
		echo "  - ${cidr}" >> ansible_run_vars.yml
	done
	echo "ct_uperf_server_ip: ${ct_server_ip_export}" >> ansible_run_vars.yml
	echo "ct_uperf_client_list: ${ct_client_ip_export}" >> ansible_run_vars.yml

	#
	# setup for logging in
	#

	#
	# Works for 1, but not multiple
	#
	network_options=" -C ${ct_client_ip} -S ${ct_server_ip}"
	
	#
	# Because Ubuntu is brain dead on AWS is not autoconfiguring the networks in like it  the other OS's do.
	#
	if [[ $os_vendor == "ubuntu" ]] && [[ $system_type == "aws" ]]; then
		#
		# Beware, if something changes in the format of things, the ifconfig below may fail.
		#
		for item in $ct_client_ip
		do
			ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo "ifconfig \`ip a | grep DOWN | cut -d: -f 2 | sed \"s/ //g\"\` $item"
		done
		for item in $ct_server_ip
		do
			ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo "ifconfig \`ip a | grep DOWN | cut -d: -f 2 | sed \"s/ //g\"\` $item"
		done
	fi
	#
	# Copy the set up files for ssh
	#
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	# Now run the script
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	# Now grab the id_rsa.pub and appendit the appropriate authorized key file
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname:/tmp/id_rsa.pub config/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} config/id_rsa_export  ${ct_user_log_in}@$net_ct_hostname:/tmp/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname:/tmp/id_rsa.pub config/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} config/id_rsa_export  ${ct_user_log_in}@$ct_hostname:/tmp/id_rsa_export
	# Now append the file
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
else
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	echo ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo chmod 755 /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	# Now run the script
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_setup
	# Now grab the id_rsa.pub and appendit the appropriate authorized key file
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname:/tmp/id_rsa.pub config/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} config/id_rsa_export  ${ct_user_log_in}@$net_ct_hostname:/tmp/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname:/tmp/id_rsa.pub config/id_rsa_export
	scp  -oStrictHostKeyChecking=no ${ct_ssh_i_option} config/id_rsa_export  ${ct_user_log_in}@$ct_hostname:/tmp/id_rsa_export
	# Now append the file
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
	ssh  -oStrictHostKeyChecking=no ${ct_ssh_i_option} ${ct_user_log_in}@$net_ct_hostname sudo /${ct_home_dir_base}/${ct_user_log_in}/bin/ssh_net_copy
fi

